{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "_q_6JrvPauw6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 1"
      ],
      "metadata": {
        "id": "3om3_QsSayEp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n = int(input())\n",
        "n = str(n)\n",
        "n = n[::-1]\n",
        "print(n)"
      ],
      "metadata": {
        "id": "sUhycrlnaxNQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k5WHuCCjaptt"
      },
      "outputs": [],
      "source": [
        "# Bài 2"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a, b = map(int,input(). split())\n",
        "a = a ^ b\n",
        "b = a ^ b\n",
        "a = a ^ b\n",
        "print(a, b)\n",
        "# Lưu vào bit tạm thời\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "k2UpAZAmat3J",
        "outputId": "a7d0e749-aa2c-428a-d684-7bcb991f4051"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3143372707.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m^\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m^\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m^\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bài 3\n"
      ],
      "metadata": {
        "id": "aXLaT3f_eNwB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = int(input())\n",
        "print(n & (n - 1) == 0)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "09HFRT2oenus",
        "outputId": "2bd23de4-edb9-478c-a87f-30b892d0bbbd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "32\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bài 4"
      ],
      "metadata": {
        "id": "66cexWUald9L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "pueoTtLJSIR0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import *\n",
        "m, n = map(int,input(). split())\n",
        "p = floor(m / n) # Làm tròn xuống\n",
        "print(p)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dgdulMKCeSY6",
        "outputId": "020f9049-688d-48d4-8209-568491f959bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "67426 11\n",
            "6129\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bài 5\n"
      ],
      "metadata": {
        "id": "rIpj1YOhmhFw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import *\n",
        "m, n = map(int,input(). split())\n",
        "p = ceil(m / n) # Làm tròn lên\n",
        "print(p)"
      ],
      "metadata": {
        "id": "E9oQ-EXLmXg7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 6\n",
        "n = int(input())\n",
        "if n % 2 == 0:\n",
        "  print('Even')\n",
        "else:\n",
        "  print('Odd')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dusg9jktmlnE",
        "outputId": "7e217002-7256-4e66-92c2-e36ef29e0968"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "Even\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 7\n",
        "a, b = map(int, input().split())\n",
        "if a < 0 and b < 0:\n",
        "  print('Yes')\n",
        "else:\n",
        "  print('No')"
      ],
      "metadata": {
        "id": "It2NUvOKm14K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 8\n",
        "a = input()\n",
        "b = input()\n",
        "if len(a) > len(b):\n",
        "  print('True')\n",
        "else:\n",
        "  print('False')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NzdNJP_OnFM7",
        "outputId": "259828b2-bf68-42d8-f5ed-f77e13f295b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cat\n",
            "dog\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 9\n",
        "a = int(input())\n",
        "b = int(input())\n",
        "c = int(input())\n",
        "if a + b > c and a + c > b and b + c > a:\n",
        "  print('Yes')\n",
        "else:\n",
        "  print('No')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uqhdL0fHnzAu",
        "outputId": "cb266e4e-db0e-45cd-d7df-6346e2912074"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "4\n",
            "5\n",
            "Yes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 10\n",
        "a = list(map(int,input().split()))\n",
        "max = a[0]\n",
        "for x in a:\n",
        "  if x > max:\n",
        "    max = x\n",
        "print(max)\n"
      ],
      "metadata": {
        "id": "EPO-hQ3dpBar",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4feb094-b6e0-4cda-ab37-55c373a0464c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000 2000 3123 34\n",
            "3123\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 11\n",
        "c1, c2, c3 = map(int, input().split())\n",
        "if c1 + c2 > c3 and c1 + c3 > c2 and c2 + c3 > c1:\n",
        "  if c1 == c2 == c3:\n",
        "    print('Tam giác đều')\n",
        "  elif c1 == c2 or c1 == c3 or c2 == c3:\n",
        "    print('Tam giác cân')\n",
        "  else:\n",
        "    print('Tam giác thường')\n",
        "else:\n",
        "  print('Không là tam giác')\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EHA7uZDrChgy",
        "outputId": "835718a0-cc3f-424f-b026-84cf823eac15"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2 3\n",
            "Không là tam giác\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 12\n",
        "n = int(input())\n",
        "if n % 400 == 0:\n",
        "  print('Yes')\n",
        "else:\n",
        "  print('No')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MrUXfAuiEEp0",
        "outputId": "79eca598-03ab-4cf3-c6f6-69fe85ad2ca5"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2004\n",
            "No\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 13\n",
        "so_dien = int(input())\n",
        "if 0 <= so_dien <= 50:\n",
        "  so_tien = so_dien * 1500\n",
        "if 51 <= so_dien <= 100:\n",
        "  so_tien = 50 * 1500 + (so_dien - 50) * 2000\n",
        "if so_dien >= 100:\n",
        "  so_tien = 50 * 1500 + 50 * 2000 + (so_dien - 100) * 3000\n",
        "print(so_tien)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAoOipfNElfJ",
        "outputId": "3fef2056-fd48-4e28-941d-242833ba96e2"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n",
            "175000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 14\n",
        "a = float(input())\n",
        "b = float(input())\n",
        "if a == b == 0:\n",
        "  print('Vô số nghiệm')\n",
        "elif a ==0 and b!= 0:\n",
        "  print('Vô nghiệm')\n",
        "else:\n",
        "  print(f'Phương trình có nghiệm c = { -b/a : .2f} ' )\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k1IS4XIVGC6n",
        "outputId": "146a43db-7cbe-4853-b26d-afed9674c642"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.4\n",
            "1.22\n",
            "Phương trình có nghiệm c = -0.51 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "WtOQqAznJkkp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 15\n",
        "n = float(input('Nhập học lực'))\n",
        "if n>= 8:\n",
        "  print('Giỏi')\n",
        "elif n>= 6.5:\n",
        "  print('Khá')\n",
        "elif n>= 5:\n",
        "  print('Trung bình')\n",
        "else:\n",
        "  print('Yếu')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pKn_ZeMbNhzh",
        "outputId": "f925b429-37a1-4ea3-ea9a-deceb5a2208d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nhập học lực6\n",
            "Trung bình\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 16\n",
        "n = float(input())\n",
        "phan_nguyen = int(n)\n",
        "phan_thap_phan = n  - phan_nguyen\n",
        "lam_tron_len = phan_nguyen + 1\n",
        "lam_tron_xuong = phan_nguyen - 1\n",
        "if phan_thap_phan >= 0.5:\n",
        "  lam_tron_so_nguyen_gan_nhat = phan_nguyen + 1\n",
        "else:\n",
        "  lam_tron_so_nguyen_gan_nhat = phan_nguyen - 1\n",
        "print(lam_tron_len, lam_tron_xuong, lam_tron_so_nguyen_gan_nhat, sep =' ')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lxVTgk6jOBLj",
        "outputId": "c55dc6d0-b0f3-4c39-df32-34004d040b64"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-5.8\n",
            "-4 -6 -6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bài 17\n",
        "c1, c2, c3 = map(int, input().split())\n",
        "if c1 + c2 > c3 and c1 + c3 > c2 and c2 + c3 > c1:\n",
        "  if c1 == c2 == c3:\n",
        "    print('Tam giác đều')\n",
        "  elif c1 == c2 or c1 == c3 or c2 == c3:\n",
        "    print('Tam giác cân')\n",
        "  else:\n",
        "    print('Tam giác thường')\n",
        "else:\n",
        "  print('Không là tam giác')"
      ],
      "metadata": {
        "id": "x2nPVR86SEv0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
